#!/usr/sbin/nft -f

flush ruleset

# Users and groups
define bird = 65099
define bind9 = 65098
define chronyd = 65097
define resolved = systemd-resolve

# Divert mark
define divert_mark = 0x0bffbfff

table bridge filter {
	#flags dormant

	chain forward {
		type filter hook forward priority filter; policy accept;
		ibrname vmap {
			"docker0"      : drop,
			"nft-isolated" : drop,
		}
	}
}

table inet filter {
	#flags dormant

	set host_ips {
		type ipv4_addr
		flags constant
		elements = {              \
			# nscache-n-ntp-1
			203.0.113.250,    \
			# nscache-n-ntp-2
			203.0.113.251,    \
		}
	}

	chain dns-divert {
		# Redirect DNS requests to systemd-resolved(8) to make
		# name resolution in containers connected to non-host
		# network (i.e. not with docker-run(1) --network=host
		# option) work.
		#
		# For non-host networks (e.g. "default") docker adds
		# public DNS nameserver(s) (e.g. 8.8.8.8 and/or 8.8.4.4)
		# to /etc/resolve.conf. Thus such nameserver(s) should
		# be enabled in host firewall forward chain and on
		# provider network where host connected.
		#
		# Later might not be true since provider may restrict
		# access to it's own DNS servers only forcing client(s)
		# to configure them by either via DHCP or manually. Here
		# is why systemd-resolved(8) should be used for name
		# resolution in containers: it uses provider DNS servers
		# on provider network.

		meta l4proto { tcp, udp } th dport 53 \
			ct mark set $divert_mark redirect to :9953
	}

	chain prerouting {
		type nat hook prerouting priority dstnat; policy accept;

		## Divert DNS requests to :PORT on input interface IP
		iifname "docker0" \
			jump dns-divert
	}
	chain postrouting {
		type nat hook postrouting priority srcnat; policy accept;

		ip saddr != @host_ips \
			oifname "en1" masquerade
	}

	chain input {
		type filter hook input priority filter; policy drop;
		iif "lo" accept

		## icmpv4
		icmp type echo-request accept

		## icmpv6
		icmpv6 type {
			nd-neighbor-solicit,
			nd-neighbor-advert,
			echo-request
		} accept

		## conntrack
		ct state vmap {
			established : accept,
			related     : accept,
			invalid     : drop,
			untracked   : drop
		}

		ct mark $divert_mark \
			accept

		meta l4proto . th dport vmap {              \
			# OpenSSH
			tcp . 22  : goto inp-ssh,           \
			# Chrony NTP
			udp . 123 : goto inp-nscache-n-ntp, \
			# BIND DNS
			udp . 53  : goto inp-nscache-n-ntp, \
			tcp . 53  : goto inp-nscache-n-ntp, \
		}
	}
	chain inp-ssh {
		ip daddr != @host_ips drop
		ip saddr {                   \
			# mtr.example.com
			203.0.113.9          \
		} accept
	}
	chain inp-nscache-n-ntp {
		ip daddr @host_ips ip saddr != @host_ips drop
		ip saddr {                  \
			# AS64510
			203.0.113.0/24,
		} accept
	}

	chain fwd-4-restricted {
		# not to internet
		oifname != "en1" return

		# no restrictions to pinger container
		ip saddr 172.27.27.172 accept

		# permit ping
		icmp type echo-request accept

		# restrict access to specified services only
		ip daddr . meta l4proto . th dport vmap { \
			# http/https
			0.0.0.0/0 . tcp . 80  : accept,   \
			0.0.0.0/0 . tcp . 443 : accept,   \
		}
	}

	chain forward {
		type filter hook forward priority filter; policy accept;

		# Not exposing internal networks MTU via TCP MSS.
		oifname "en1" tcp flags syn \
			tcp option maxseg size set rt mtu

		## conntrack
		ct state vmap {
			established : accept,
			related     : accept,
			invalid     : drop,
			untracked   : drop
		}

		iifname vmap {
			"docker0"      : goto fwd-4-restricted,
			"nft-isolated" : goto fwd-4-restricted,
			"en1"          : drop
		}

		## reject
		reject with icmpx type admin-prohibited
	}

	chain output {
		type filter hook output priority filter; policy drop;
		oif "lo" accept

		## icmpv6
		icmpv6 type {
			nd-neighbor-advert,
			nd-neighbor-solicit,
		} accept

		## conntrack
		ct state vmap {
			established : accept,
			related     : accept,
			invalid     : drop,
			untracked   : drop
		}

		# Not from our addresses
		ip saddr != @host_ips drop

		meta l4proto . th dport vmap {     \
			# BIRD BGP
			tcp . 179 : goto out-bgp,  \
			# Chrony NTP
			udp . 123 : goto out-ntp,  \
			# BIND DNS
			udp . 53  : goto out-dns,  \
			tcp . 53  : goto out-dns,  \
			# HTTP/HTTPS
			tcp . 80  : goto out-http, \
			tcp . 443 : goto out-http, \
		}
	}
	chain out-bgp {
		ip daddr {             \
			# rs242
			203.0.113.242, \
			# rs243
			203.0.113.243, \
		} tcp sport > 1023 goto out-bird
	}
	chain out-ntp {
		ip daddr @host_ips \
			udp sport 123 accept
		ip daddr {                    \
			# time1.facebook.com
			129.134.28.123,       \
			# time3.facebook.com
			129.134.25.123,       \
			# time.cloudflare.com
			162.159.200.1,        \
			162.159.200.123,      \
		} udp sport > 1023 goto out-chronyd
	}
	chain out-dns {
		th sport <= 1023 return

		jump out-bind

		ip daddr {                      \
			# resolver1.opendns.com
			208.67.222.222,         \
			# resolver2.opendns.com
			208.67.220.220,         \
		} goto out-resolved
	}
	chain out-http {
		# To restrict egress HTTP/HTTPS traffic reliably while
		# maintaining desired security level:
		#
		#    1) deny traffic for not listed, non-root (uid 0) users that
		#       commonly used to run network applications/services
		#    2) restrict HTTP/HTTPS for special (e.g. admin) and system
		#       (e.g. _apt) users
		#    3) allow HTTP/HTTPS for root (uid 0) user(s) to ANY
		#       internet address (needed for docker containers rebuild).
		#
		# Note that restricting root (uid 0) user does not make sense
		# unless processes running by this user also have NET_ADMIN
		# capability removed.

		meta skuid . meta skgid vmap {                   \
			# docker(1), ...
			root  . root        : accept,            \
			# git(1)
			localadm . localadm : goto out-localadm, \
			# apt(8)
			_apt  . nogroup     : goto out-apt,      \
		}
	}

	chain out-localadm {
	}
	chain out-apt {
		ip daddr {                        \
			# ubuntu.ip-connect.info
			194.5.96.13,              \
			91.236.251.13,            \
		} accept
	}

	chain out-bird {
		meta skuid $bird \
		meta skgid $bird \
			accept
	}
	chain out-chronyd {
		meta skuid $chronyd \
		meta skgid $chronyd \
			accept
	}
	chain out-bind {
		meta skuid $bind9 \
		meta skgid $bind9 \
			accept
	}
	chain out-resolved {
		meta skuid $resolved \
		meta skgid $resolved \
			accept
	}
}
