#!/usr/sbin/nft -f

flush ruleset

# Users and groups
define mitmproxy = 65099
define dnsmasq = 65098
define chronyd = 65097
define resolved = systemd-resolve

# Divert mark
define divert_mark = 0x0bffbfff
# Direct mark
define direct_mark = 0x6a80a443

include "/usr/local/etc/nftables.d/define.*"

table bridge filter {
	#flags dormant

	chain forward {
		type filter hook forward priority filter; policy accept;
		ibrname vmap {
			"docker0"      : drop,
			"nft-isolated" : drop,
		}
	}
}

table inet nat {
	#flags dormant

	set localnets {
		type ipv4_addr
		flags constant,interval
		elements = {
			127.0.0.0/8,     # lo  (not used, handled by fib lookup)
			192.0.2.0/24,    # en0
			198.51.100.0/24, # rpf
			203.0.113.0/24   # rpf
		}
	}

	include "/usr/local/etc/nftables.d/set.mitmproxy_ips"
	include "/usr/local/etc/nftables.d/set.mitm_ips"
	include "/usr/local/etc/nftables.d/set.direct_*"

	chain dns-divert {
		# Redirect DNS requests to systemd-resolved(8) to make
		# name resolution in containers connected to non-host
		# network (i.e. not with docker-run(1) --network=host
		# option) work.
		#
		# For non-host networks (e.g. "default") docker adds
		# public DNS nameserver(s) (e.g. 8.8.8.8 and/or 8.8.4.4)
		# to /etc/resolve.conf. Thus such nameserver(s) should
		# be enabled in host firewall forward chain and on
		# provider network where host connected.
		#
		# Later might not be true since provider may restrict
		# access to it's own DNS servers only forcing client(s)
		# to configure them by either via DHCP or manually. Here
		# is why systemd-resolved(8) should be used for name
		# resolution in containers: it uses provider DNS servers
		# on provider network.

		meta l4proto { tcp, udp } th dport 53 \
			ct mark set $divert_mark redirect to :9953
	}

	chain http-divert {
		# To exclude traffic from divert (i.e. bypass mitmproxy
		# at network layer) make sure to
		#
		#  1) to exclude such traffic in divert-* chain(s)
		#  2) provide corresponding fwd-4-* rule in filter table

		tcp dport { 80, 443 } \
			ct mark set $divert_mark redirect to :8080
	}

	chain http-direct {
		tcp dport { 80, 443 } \
			ct mark set $direct_mark accept
	}

	chain divert-docker {
		ip daddr @mitm_ips \
			goto http-direct
		ip daddr != @direct_docker_ips \
			accept
		meta l4proto @direct_docker_http \
			goto http-direct
		goto http-divert
	}
	chain divert-nginx {
		ip daddr != @direct_nginx_ips \
			accept
		meta l4proto @direct_nginx_http \
			goto http-direct
		goto http-divert
	}
	chain divert-in {
		# not to internal addresses
		ip daddr @localnets accept

		# from internal network only
		iifname != "en0" accept
		# redirect to mitmproxy
		ip saddr vmap {
			192.0.2.2     : goto divert-docker,
			192.0.2.242   : goto divert-nginx,
		}

		# Input from redirect in nat output handled via "lo"
		# and accepted with iif "lo" accept in input chain
		accept
	}

	chain direct-mitmproxy {
		# restrict mitmproxy originated traffic
		ip daddr != @mitmproxy_ips \
		ip daddr != @mitm_ips \
			reject with icmpx type admin-prohibited

		# Output internet traffic redirected through "lo" network
		# device with destination address rewritten by primary
		# IP of that network device (i.e. 127.0.0.1)
		goto http-direct
	}
	chain divert-edge {
		ip daddr != @direct_edge_ips \
			accept
		meta l4proto @direct_edge_http \
			goto http-direct
		goto http-divert
	}
	chain divert-out {
		# not to internal addresses
		ip daddr @localnets accept

		# to external network only
		oifname != "en1" accept

		# We cannot simply restrict root (uid 0) originated traffic
		# since use of dnsmasq(8) driven sets to restrict edge's
		# egress traffic, like forwarded traffic for hosts on en0,
		# because systemd-resolved(8) in stub mode used as resolver
		# that may not pick dnsmasq(8) to forward requests (e.g.
		# dnsmasq container stopped).
		#
		# Using systemd-resolved(8) on edge has benefits of tight
		# integration with systemd-networkd(8), ability to detect
		# DNS server issues and independence of dnsmasq(8). For case
		# when dnsmasq(8) deployed in container above benefits leave
		# edge host network functional even during dnsmasq contailer
		# rebuild (i.e. dnsmasq container stopped).
		#
		# Assuming above to restrict edge's egress traffic reliably
		# while maintaining desired security level:
		#
		#    1) deny traffic for not listed, non-root (uid 0) users that
		#       commonly used to run network applications/services
		#    2) restrict HTTP/HTTPS for special (e.g. admin) and system
		#       (e.g. _apt) users
		#    3) allow HTTP/HTTPS for root (uid 0) user(s) to ANY
		#       internet address (needed for docker containers rebuild).
		#
		# Note that restricting root (uid 0) user does not make sense
		# unless processes running by this user also have NET_ADMIN
		# capability removed.

		meta skuid . meta skgid vmap {                           \
			# docker(1)
			root       . root       : goto http-direct,      \
			# git(1)
			admin      . admin      : goto divert-edge,      \
			# apt(8)
			_apt       . nogroup    : goto divert-edge,      \
			# mitmproxy
			$mitmproxy . $mitmproxy : goto direct-mitmproxy, \
		}
	}

	chain prerouting {
		type nat hook prerouting priority dstnat; policy accept;

		## Divert DNS requests to :PORT on input interface IP
		iifname "docker0" \
			jump dns-divert

		## Transit traffic
		fib daddr type != local goto divert-in

		# DNAT from public (en1) and private (en0) networks only
		iifname != "en1" iifname != "en0" accept

		## DNAT to external addresses
		dnat ip to ip protocol . th dport map { \
			# nginx
			tcp . 80   : 192.0.2.242,       \
			tcp . 443  : 192.0.2.242,       \
			# sftp
			tcp . 22   : 192.0.2.244        \
		}
	}

	chain snat-2-ext {
		masquerade
	}
	chain snat-2-int {
		ct status ! dnat return
	}
	chain postrouting {
		type nat hook postrouting priority srcnat; policy accept;

		oifname vmap {
			"en1" : jump snat-2-ext,
			"en0" : jump snat-2-int
		}
	}

	chain output {
		type nat hook output priority -100; policy accept;

		## Transit traffic
		fib daddr type != local goto divert-out
	}
}

table inet filter {
	#flags dormant

	set storage_ips {
		type ipv4_addr
		flags constant
		elements = {
			203.0.113.7, # nfs.example.com
		}
	}

	chain to-nfs {
		tcp dport 2049 \
			ip daddr @storage_ips accept
	}
	chain to-smb {
		tcp dport 445 \
			ip daddr @storage_ips accept
	}
	chain to-http {
		ct mark $direct_mark \
			accept
	}

	chain inp-en0 {
		## sshd
		ip saddr 192.0.2.221 ip daddr 192.0.2.1 \
			tcp dport 22 accept

		## dnsmasq: dhcp
		ip saddr 0.0.0.0 ip daddr 255.255.255.255 \
			udp sport 68 udp dport 67 accept

		## strict src & dst addressing
		ip saddr != 192.0.2.0/24 drop
		ip daddr != 192.0.2.1 drop

		## dnsmasq: dhcp-renew
		udp sport 68 udp dport 67 accept

		## dnsmasq: dns
		meta l4proto { tcp, udp } th dport 53 accept

		## chronyd
		udp dport 123 accept

		## mitmproxy
		ip saddr 192.0.2.242 \
			tcp dport 8081 accept

		## reject
		reject with icmpx type admin-prohibited
	}
	chain inp-en1 {
		## drop
		drop
	}
	chain input {
		type filter hook input priority filter; policy drop;
		iif "lo" accept

		## conntrack
		ct state vmap {
			established : accept,
			related     : accept,
			invalid     : drop
		}

		## icmpv4
		icmp type echo-request accept

		## icmpv6
		icmpv6 type {
			nd-neighbor-solicit,
			nd-neighbor-advert,
			echo-request
		} accept

		ct mark $divert_mark \
			accept

		iifname vmap {
			"en0" : goto inp-en0,
			"en1" : goto inp-en1
		}
	}

	## from 192.0.2.0/24

	# 192.0.2.2
	chain fwd-4-docker {
		jump to-nfs
		goto to-http
	}

	## to 192.0.2.0/24

	# 192.0.2.242
	chain fwd-2-nginx {
		# Qualys SSL Labs: SSL Server Test (free)
		ip saddr 64.41.200.0/24 accept

		ip saddr @agent_ips accept
	}

	# 192.0.2.244
	chain fwd-2-sftp {
		# Qualys PCI scan (paid)
		ip saddr {
			64.39.96.0/20,
			139.87.112.0/23,
		} return

		ip saddr @agent_ips accept
	}

	chain fwd-4-restricted {
		# not to internet
		oifname != "en1" return

		# no restrictions to pinger container
		ip saddr 172.27.27.172 accept

		# permit ping
		icmp type echo-request accept

		# restrict access to specified services only
		ip daddr . meta l4proto . th dport vmap { \
			# http/https
			0.0.0.0/0 . tcp . 80  : accept,   \
			0.0.0.0/0 . tcp . 443 : accept,   \
		}
	}

	chain fwd-ct-dnat {
		ip daddr vmap {
			192.0.2.242 : jump fwd-2-nginx,      # nginx
			192.0.2.244 : jump fwd-2-sftp,       # sftp
		}
		drop
	}
	chain fwd-ct-new {
		ct status dnat \
			goto fwd-ct-dnat

		iifname vmap {
			"docker0"      : goto fwd-4-restricted,
			"nft-isolated" : goto fwd-4-restricted,
		}

		iifname != "en0" drop
		oifname != "en1" drop

		ip saddr vmap {
			192.0.2.2   : goto fwd-4-docker,     # docker
			192.0.2.242 : goto to-http,          # nginx
		}
	}

	chain forward {
		type filter hook forward priority filter; policy accept;

		# Not exposing internal networks MTU via TCP MSS.
		oifname "en1" tcp flags syn \
			tcp option maxseg size set rt mtu

		## conntrack
		ct state vmap {
			invalid     : drop,
			established : accept,
			related     : jump fwd-ct-related,
			new         : jump fwd-ct-new,
			untracked   : drop
		}

		## reject
		reject with icmpx type admin-prohibited
	}

	chain out-resolved {
		meta skuid $resolved \
		meta skgid $resolved \
			accept
	}
	chain out-chronyd {
		meta skuid $chronyd \
		meta skgid $chronyd \
			accept
	}
	chain out-en0 {
		## dnsmasq: dhcp reply
		meta skuid root \
		meta skgid root \
			udp sport 67 udp dport 68 accept

		## drop
		drop
	}
	chain out-en1 {
		jump to-nfs

		ip daddr . meta l4proto . th dport vmap {              \
			# mitmproxy
			0.0.0.0/0    . tcp . 80   : jump to-http,      \
			0.0.0.0/0    . tcp . 443  : jump to-http,      \
			# resolved
			8.8.8.8      . udp . 53   : jump out-resolved, \
			8.8.8.8      . tcp . 53   : jump out-resolved, \
			1.1.1.1      . udp . 53   : jump out-resolved, \
			1.1.1.1      . tcp . 53   : jump out-resolved, \
			# chronyd
			216.239.35.0 . udp . 123  : jump out-chronyd,  \
		}

		## reject
		reject with icmpx type admin-prohibited
	}
	chain output {
		type filter hook output priority filter; policy drop;
		oif "lo" accept

		## conntrack
		ct state vmap {
			established : accept,
			related     : accept,
			invalid     : drop
		}

		## icmpv6
		icmpv6 type {
			nd-neighbor-solicit,
			nd-neighbor-advert,
		} accept

		oifname vmap {
			"en0" : goto out-en0,
			"en1" : goto out-en1
		}
	}

	chain postrouting {
		type filter hook postrouting priority srcnat + 10; policy accept

		oifname "en1" ct state new \
			fib saddr . oif type != local counter drop
	}
}
